import React from 'react';
import { Download, FilePlus } from 'lucide-react';
import { Question } from '../types';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink, Font } from '@react-pdf/renderer';

interface ResultsDisplayProps {
  questions: Question[];
  onGenerateSolutions: () => void;
}

// Register fonts only once at module level
const registerFonts = () => {
  if (!registerFonts.initialized) {
    Font.register({
      family: 'Inter',
      src: 'https://rsms.me/inter/font-files/Inter-Regular.woff2'
    });

    Font.register({
      family: 'Inter-Bold',
      src: 'https://rsms.me/inter/font-files/Inter-Bold.woff2'
    });

    registerFonts.initialized = true;
  }
};

// Add initialized property to the function
registerFonts.initialized = false;

// Register fonts immediately
registerFonts();

const styles = StyleSheet.create({
  page: {
    padding: 40,
    fontFamily: 'Inter',
    backgroundColor: '#ffffff',
  },
  header: {
    marginBottom: 30,
    borderBottom: '1 solid #e5e7eb',
    paddingBottom: 10,
  },
  title: {
    fontSize: 24,
    fontFamily: 'Inter-Bold',
    color: '#1f2937',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 12,
    color: '#6b7280',
    marginBottom: 20,
  },
  section: {
    marginBottom: 20,
  },
  questionContainer: {
    marginBottom: 25,
    padding: 15,
    backgroundColor: '#f9fafb',
    borderRadius: 8,
  },
  questionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
    borderBottom: '1 solid #e5e7eb',
    paddingBottom: 8,
  },
  questionNumber: {
    fontSize: 14,
    fontFamily: 'Inter-Bold',
    color: '#2563eb',
  },
  topic: {
    fontSize: 12,
    color: '#4b5563',
  },
  difficulty: {
    fontSize: 10,
    color: '#6b7280',
    backgroundColor: '#f3f4f6',
    padding: '4 8',
    borderRadius: 4,
  },
  questionText: {
    fontSize: 14,
    lineHeight: 1.5,
    color: '#1f2937',
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    fontSize: 10,
    color: '#9ca3af',
    textAlign: 'center',
    borderTop: '1 solid #e5e7eb',
    paddingTop: 10,
  },
  pageNumber: {
    position: 'absolute',
    bottom: 30,
    right: 40,
    fontSize: 12,
    color: '#6b7280',
  },
});

const QuestionsPDF = ({ questions }: { questions: Question[] }) => {
  const today = new Date().toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Practice Questions</Text>
          <Text style={styles.subtitle}>Generated on {today}</Text>
        </View>

        <View style={styles.section}>
          {questions.map((question, index) => (
            <View key={question.id} style={styles.questionContainer}>
              <View style={styles.questionHeader}>
                <Text style={styles.questionNumber}>Question {index + 1}</Text>
                <View style={{ flexDirection: 'row', gap: 8 }}>
                  <Text style={styles.topic}>{question.topic}</Text>
                  <Text style={styles.difficulty}>{question.difficulty}</Text>
                </View>
              </View>
              <Text style={styles.questionText}>{question.question}</Text>
            </View>
          ))}
        </View>

        <Text style={styles.footer}>
          Generated by PracticeQs - AI Practice Question Generator
        </Text>
        <Text
          style={styles.pageNumber}
          render={({ pageNumber, totalPages }) => `${pageNumber} / ${totalPages}`}
        />
      </Page>
    </Document>
  );
};

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({ 
  questions, 
  onGenerateSolutions 
}) => {
  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6 mb-6 animate-fadeIn">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-medium text-gray-800 dark:text-white">Generated Questions</h2>
        <div className="flex space-x-2">
          <PDFDownloadLink
            document={<QuestionsPDF questions={questions} />}
            fileName="practice_questions.pdf"
            className="flex items-center space-x-1 py-2 px-3 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
          >
            {({ loading }) => (
              <>
                <Download className="w-4 h-4" />
                <span>{loading ? 'Preparing...' : 'Download PDF'}</span>
              </>
            )}
          </PDFDownloadLink>
          <button
            onClick={onGenerateSolutions}
            className="flex items-center space-x-1 py-2 px-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            <FilePlus className="w-4 h-4" />
            <span>Generate Solutions</span>
          </button>
        </div>
      </div>
      
      <div className="space-y-4">
        {questions.map((question) => (
          <div 
            key={question.id} 
            className="p-4 border border-gray-200 dark:border-gray-700 rounded-md hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between mb-2">
              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">
                {question.topic}
              </span>
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                ${question.difficulty === 'easy' 
                  ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'
                  : question.difficulty === 'medium'
                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'
                    : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
                }`}>
                {question.difficulty}
              </span>
            </div>
            <p className="text-gray-800 dark:text-gray-200">{question.question}</p>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ResultsDisplay;